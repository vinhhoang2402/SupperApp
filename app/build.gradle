apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.fabric'
apply plugin: 'com.google.protobuf'

def final applicationId_UAT = "vn.minerva.sale.uat"
def final applicationId_DEV = "vn.minerva.sale.dev"
def final applicationId_Product = "vn.minerva.sale"
def final FABRIC_API_KEY_UAT = "6e8150dd10737f03a50a312204415df220095522"
def final FABRIC_API_KEY_PRODUCT = "6e8150dd10737f03a50a312204415df220095522"
def final FABRIC_API_KEY_DEV = "6e8150dd10737f03a50a312204415df220095522"

def final APP_NAME_UAT = "UAT Sale"
def final APP_NAME_DEV = "DEV Sale"
def final APP_NAME_PRODUCT = "Sale"

def final schemeApp = "survey"
def final BOOLEAN = "boolean"
def final TRUE = "true"
def final FALSE = "false"

def targetSdkVersionValue = rootProject.ext.targetSdkVersion as Integer
def compileSdkVersionValue = rootProject.ext.compileSdkVersion as Integer
def versionNameValue = rootProject.ext.versionName as String
def minSdkVersionValue = rootProject.ext.minSdkVersion as Integer
def versionRetrofitValue = rootProject.ext.versionRetrofit as String
def versionAnkoValue = rootProject.ext.versionAnko as String
def versionLeakcanaryValue = rootProject.ext.versionLeakcanary as String
def versionSupportValue = rootProject.ext.versionSupport as String

def getVersionCodeTimestamp() {
    def date = new Date()
    def formattedDate = date.format('yyMMddHHmm')
    def code = formattedDate.toBigInteger()
    println sprintf("VersionCode: %d", code)
    return code
}

android {
    compileSdkVersion compileSdkVersionValue
    flavorDimensions "superapp_flavor_name"
    defaultConfig {
        targetSdkVersion targetSdkVersionValue
        versionCode getVersionCodeTimestamp()
        versionName versionNameValue
        testInstrumentationRunner "android.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
        def date = new Date()
        def formattedDate = date.format('hhmmddMMyyyy')
        archivesBaseName = "$formattedDate"
    }
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
    buildTypes {
        debug {
//            minifyEnabled true
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            resValue("string", "version_app", "Version ${versionNameValue}")
        }

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            resValue("string", "version_app", "Version ${versionNameValue}")
        }
    }
//    applicationVariants.all { variant ->
//        variant.outputs.all {
//            def date = new Date()
//            def formattedDate = date.format('yyyy-MM-dd')
//            outputFileName = "${variant.flavorName.replace("_", "")}-${formattedDate}.apk"
//        }
//    }
    signingConfigs {
        uat {
            storeFile file('../../Push/sale.jks')
            storePassword 'sale@123'
            keyAlias 'sale'
            keyPassword 'sale@123'
        }
        product {
            storeFile file('../../Push/sale.jks')
            storePassword 'sale@123'
            keyAlias 'sale'
            keyPassword 'sale@123'
        }
    }
    productFlavors {
        superappUAT {
            signingConfig signingConfigs.uat
            applicationId = applicationId_UAT
            minSdkVersion minSdkVersionValue
            manifestPlaceholders = [nameApp: APP_NAME_UAT, FABRIC_API_KEY: FABRIC_API_KEY_UAT, appPakage: applicationId_UAT]

            buildConfigField BOOLEAN, "USE_DATA_UAT", TRUE
            buildConfigField BOOLEAN, "USE_DATA_DEV", FALSE
            buildConfigField BOOLEAN, "USE_DATA_PRODUCT", FALSE
            buildConfigField BOOLEAN, "SYNC", TRUE
            buildConfigField BOOLEAN, "LOG_CRASHLYTICS", TRUE
            buildConfigField "String", "SCHEME_APP", '"' + schemeApp + '"'
        }
        superappDEV {
            signingConfig signingConfigs.uat
            applicationId = applicationId_DEV
            minSdkVersion minSdkVersionValue
            manifestPlaceholders = [nameApp: APP_NAME_DEV, FABRIC_API_KEY: FABRIC_API_KEY_DEV, appPakage: applicationId_DEV]

            buildConfigField BOOLEAN, "USE_DATA_DEV", TRUE
            buildConfigField BOOLEAN, "USE_DATA_UAT", FALSE
            buildConfigField BOOLEAN, "USE_DATA_PRODUCT", FALSE
            buildConfigField BOOLEAN, "SYNC", TRUE
            buildConfigField BOOLEAN, "LOG_CRASHLYTICS", TRUE
            buildConfigField "String", "SCHEME_APP", '"' + schemeApp + '"'
        }

        superappPRO {
            signingConfig signingConfigs.product
            applicationId = applicationId_Product
            minSdkVersion minSdkVersionValue
            manifestPlaceholders = [nameApp: APP_NAME_PRODUCT, FABRIC_API_KEY: FABRIC_API_KEY_PRODUCT, appPakage: applicationId_Product]

            buildConfigField BOOLEAN, "USE_DATA_UAT", FALSE
            buildConfigField BOOLEAN, "USE_DATA_DEV", FALSE
            buildConfigField BOOLEAN, "USE_DATA_PRODUCT", TRUE
            buildConfigField BOOLEAN, "SYNC", TRUE
            buildConfigField BOOLEAN, "LOG_CRASHLYTICS", TRUE
            buildConfigField "String", "SCHEME_APP", '"' + schemeApp + '"'
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['../libs']
            res.srcDirs = [
                    'src/main/res/core',
                    'src/main/res/chatting',
                    'src/main/res'
            ]
            assets.srcDirs = ['src/main/assets', 'src/androidTest/assets']
        }
    }
//    splits {
//        abi {
//            enable true
//            reset()
//            include 'armeabi', 'armeabi-v7a'
//            universalApk true
//        }
//    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    aaptOptions.cruncherEnabled = false
    aaptOptions.useNewCruncher = false
}

sourceSets {
    main.java.srcDirs += [file("$buildDir/generated/source/kapt/main")]
    main.java.srcDirs += file("${protobuf.generatedFilesBaseDir}/main/javalite")
}
protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.0.0"
    }
    plugins {
        javalite {
            artifact = "com.google.protobuf:protoc-gen-javalite:3.0.0"
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                remove java
            }
            task.plugins {
                javalite {}
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    //Squareup
    implementation "com.squareup.retrofit2:retrofit:${versionRetrofitValue}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${versionRetrofitValue}"
    implementation "com.squareup.retrofit2:converter-gson:${versionRetrofitValue}"
    implementation 'com.squareup.okhttp3:okhttp:3.12.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.11.0'

    //Stetho
    implementation 'com.facebook.stetho:stetho-okhttp3:1.5.0'

    //RxKotlin
    implementation 'io.reactivex.rxjava2:rxkotlin:2.2.0'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.0'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.3'

    implementation 'de.hdodenhof:circleimageview:3.0.1'

    //RecyclerView
    implementation 'com.github.vivchar:RendererRecyclerViewAdapter:2.5.1'

    //Glide
    implementation 'com.github.bumptech.glide:glide:4.9.0'
    kapt 'com.github.bumptech.glide:compiler:4.9.0'
    implementation 'com.github.bumptech.glide:annotations:4.9.0'
    implementation ('com.github.bumptech.glide:okhttp3-integration:4.8.0'){
        exclude group: 'glide-parent'
    }

    //Memory Leak Detection
    debugImplementation "com.squareup.leakcanary:leakcanary-android:${versionLeakcanaryValue}"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:${versionLeakcanaryValue}"
    testImplementation "com.squareup.leakcanary:leakcanary-android-no-op:${versionLeakcanaryValue}"

    //support
    //noinspection GradleCompatible
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.core:core:1.3.0'
    implementation 'com.google.android.material:material:1.2.0-alpha05'

    //temp
    implementation 'com.orhanobut:logger:2.1.1'
    implementation 'commons-codec:commons-codec:1.10'

    //Picture taking libs
    implementation 'com.facebook.fresco:fresco:1.4.0'

    //Crashlytics Fabric
    implementation('com.crashlytics.sdk.android:crashlytics:2.10.1') {
        transitive = true
    }
    implementation 'com.google.firebase:firebase-analytics:17.2.2'

    //Multidex
    implementation 'androidx.multidex:multidex:2.0.1'

    //db
    implementation 'io.paperdb:paperdb:2.1'

    //mapbox
    implementation('com.mapbox.mapboxsdk:mapbox-android-sdk:9.2.0')

    //add firebase
    implementation 'com.google.firebase:firebase-core:17.2.2'
    implementation 'com.google.firebase:firebase-messaging:20.1.0'

    //CircleProgress
    implementation 'com.github.jakob-grabner:Circle-Progress-View:v1.3'

    implementation 'com.app.infideap.stylishwidget:stylish-widget:1.3.9'

    implementation 'com.google.android:flexbox:2.0.1'

    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'

    //image scrop
    api 'com.theartofdev.edmodo:android-image-cropper:2.8.+'

    //download file
    implementation "com.github.ssseasonnn:RxDownload:1.0.9"

    //bottomsheet
    implementation 'com.android.support:design:28.0.0'

    /*
    * Add chatting with rabbit
    * */
    implementation 'com.rabbitmq:amqp-client:4.11.3'
    api "com.google.protobuf:protobuf-lite:3.0.1"
    // Use for show image fullscreen, horizontal swipe
    implementation 'com.github.stfalcon:frescoimageviewer:0.5.0'
    implementation 'com.google.android.gms:play-services-location:17.0.0'
    /*
    End chatting
    * */
    implementation 'com.github.tbruyelle:rxpermissions:0.10.2'

    //Get File Path
    implementation 'com.github.HBiSoft:PickiT:0.1.10'

    //add size
    implementation 'com.intuit.sdp:sdp-android:1.0.6'

    //arcore
    implementation 'com.google.ar.sceneform.ux:sceneform-ux:1.17.0'

    //record wave ui
    implementation 'com.github.alxrm:audiowave-progressbar:0.9.2'

    //chart
    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'

    //shimmer
    implementation 'com.facebook.shimmer:shimmer:0.5.0'

    //Realm
    implementation 'io.realm:realm-android:0.84.1'
    annotationProcessor 'io.realm:realm-android:0.84.1'
}
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.ar.sceneform.plugin'

//sceneform.asset('sampledata/lion.fbx',
//        'default',
//        'sampledata/lion.sfa',
//        'src/main/res/raw/lion',
//        ['sampledata/lion.fbx', 'sampledata/lion.fbx'])
//
//sceneform.asset('sampledata/testdata/test_anim.fbx',
//        'default',
//        'sampledata/testdata/test_anim.sfa',
//        'src/main/res/raw/test_anim',
//        ['sampledata/testdata/test_anim.fbx', 'sampledata/testdata/test_anim.fbx'])

